#kdl_name = KgtMain
KDL.KGT.main (action: KDL.KGT.Action) : (Kindelia.IO KDL.KGT.Response)

// Mine action
KDL.KGT.main (KDL.KGT.Action.mint user) = do Kindelia.IO {
  ask state = (Kindelia.IO.take KDL.KGT.State)
  ask current = Kindelia.IO.tick U120
  let state = User.Sipher.KGT.mint user current state
  ask (Kindelia.IO.save state)
  return (KDL.KGT.Response.mint Bool.true)
}

// Transfer action
KDL.KGT.main (KDL.KGT.Action.send from to value) = do Kindelia.IO {
  ask subjt = Kindelia.IO.subj U120
  //Verifies if the caller is the person that is sending the Tokens
  let verif = U120.equal subjt from
  KDL.KGT.verification verif from to value
}

// Check Balance action
KDL.KGT.main (KDL.KGT.Action.get user) = do Kindelia.IO {
  ask state   = (Kindelia.IO.load KDL.KGT.State)
  let balance = User.Sipher.KGT.get user state
  return (KDL.KGT.Response.get balance)
}

// Auxiliar Function to verify if the the caller is indeed the owner of the
// account
KDL.KGT.verification (verif: Bool) (from: U120) (to: U120) (value: U120) : (Kindelia.IO KDL.KGT.Response)
// If the Sender is the owner, it will success and the transfer will happen
KDL.KGT.verification Bool.true from to value = do Kindelia.IO {
    ask state = (Kindelia.IO.take KDL.KGT.State)
    let state = User.Sipher.KGT.transfer from to value state
    ask (Kindelia.IO.save state)
    return (KDL.KGT.Response.send Bool.true)
  }
// If the sender is not the owner of that account, the transaction will fail
KDL.KGT.verification Bool.false from to value = do Kindelia.IO { return KDL.KGT.Response.send Bool.false }


#kdl_name = KgtInit
KDL.KGT.init : KDL.KGT.State {
  (KDL.KGT.State.new 0u120 User.Sipher.PatriciaTree.empty)
}

#kdl_name = KGT
KDL.KGT : Kindelia.Contract KDL.KGT.State KDL.KGT.Action KDL.KGT.Response {
  Kindelia.Contract.new (act => KDL.KGT.main act) KDL.KGT.init
}
