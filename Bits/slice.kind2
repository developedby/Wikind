// Takes a part of the bit structure between start and end
// Example: (Bits.slice Nat.one Nat.two (Bits.i (Bits.o (Bits.i (Bits.o Bits.e)))) -> (Bits.o (Bits.i Bits.e))
Bits.slice (start: Nat) (end: Nat) (bits: Bits) : Bits {
  let len = (Nat.sub end start)
  Bits.take len (Bits.drop start bits)
}